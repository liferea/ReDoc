{
  "openapi" : "3.0.0",
  "info" : {
    "version" : "v3-oas3",
    "x-logo" : {
      "url" : "/static/logo.png",
      "backgroundColor" : null,
      "altText" : "Gate Express logo"
    },
    "title" : "Gate Express",
    "description" : "This is sample documentation \"Gate Express\"\n\n\n# Цифровая подпись запроса\n  Все виды сообщений содержат в HTTP заголовоке параметр X-REQUEST-SIGNATURE, в котором находится проверочное значение запроса, вычисленное с помощью алгоритма HMAC. При реализации проверки сообщения, обратите внимание на следующие моменты: \n  уведомления отправляются POST запросом\n  \n  cообщением является тело запроса body, например:\n  \n      \"Amount=50.00&Currency=RUB\" \n  \n  в качестве ключа используется значение параметра secret, например:\n  \n     \"site_secret_value_1\" \n  \n  хэш вычисляется функцией SHA256 (получаем данные в шестнадцатеричной (!) кодировке в нижнем регистре):\n  \n      \"TODO78e79b0052da99b32146527cc7c5ab13222a4e8a3ded3bd77254f271087cb2a3\" \n  \n  вычисленное значение переводим в кодировку base64:\n  \n      \"TODONzhlNzliMDA1MmRhOTliMzIxNDY1MjdjYzdjNWFiMTMyMjJhNGU4YTNkZWQzYmQ3NzI1NGYyNzEwODdjYjJhMw==\" \n  \n  Сайты для online проверки генерации подписи:\n  \n      https://www.liavaag.org/English/SHA-Generator/HMAC/\n      \n      https://www.base64encode.org\n  \n  Пример формирования X-REQUEST-SIGNATURE (Python):\n  \n      import hashlib\n      import hmac\n      import base64\n      \n      def calc_signature(body, site_secret_value)\n          message = body\n          secret = bytes(site_secret_value).encode('utf-8')\n          digest = hmac.new(secret, message, digestmod=hashlib.sha256).hexdigest()\n          return base64.b64encode(digest)\n      \n      \n  Пример формирования signature (PHP):\n  \n  \n      $requestType = \"/payments/requests/single\";\n      $requestUrl = \"https://ep.gate.express/\" . $requestType;\n  \n      // array for parametres\n      $bodyRequestArray = array(\n          'CardNumber' => \"CREDIT_CARD_NUMBER\", // Without spaces, for example, '4111111111111111'\n          'ExpMonth' => \"EXPIRED_MONTH\", // 2 digits, for example, '05'\n          'ExpYear' => \"EXPIRED_YEAR\", // 2 digits, for example, '24'\n          'CardHolder' => \"CARD_HOLDER_NAME\",                        \n          'CVC' => \"CVC\",\n          'OrderId'   => \"YOUR_ORDER_ID\" \n          'Amount'    => \"AMOUNT\", // digits and dot ('.'), for example, '100.45'\n          'Currency'  => strtoupper(\"CURRENCY\"), // RUB|USD\n          'Description' => \"DESCRIPTION\",\n      );\n  \n      $body = http_build_query($bodyRequestArray);\n      $signature = getSignature($body, \"YOUR_SECRET_KEY\");\n  \n      $ch = curl_init();\n      curl_setopt($ch, CURLOPT_URL, $requestUrl);\n      curl_setopt($ch, CURLOPT_POST, 1);\n      curl_setopt($ch, CURLOPT_POSTFIELDS, $body);  //Post Fields\n      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n  \n      $headers = array(\n          'X-REQUEST-SIGNATURE:'.$signature\n      );\n  \n      curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n  \n      $server_output = curl_exec ($ch);\n  \n      curl_close ($ch);\n  \n      function getSignature($body, $secretKey)\n      {\n          // create signature\n          $hash = hash_hmac('sha256', $body, $secretKey, false);\n          return base64_encode($hash);\n      }\n      \n  \n  \n"
  },
  "paths" : {
    "/orders/{OrderId}" : {
      "get" : {
        "tags" : [ "gateway" ],
        "description" : "Получение статуса платежей по OrderId.",
        "operationId" : "/orders/{OrderId}:",
        "parameters" : [ {
          "in" : "path",
          "name" : "OrderId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OrderIdResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      }
    },
    "/transactions/{transactionId}" : {
      "get" : {
        "tags" : [ "gateway" ],
        "description" : "Получение статуса платежа по TransactionId.",
        "operationId" : "/transactions/{transactionId}:",
        "parameters" : [ {
          "in" : "path",
          "name" : "transactionId",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionIdResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Transaction not found"
          }
        }
      }
    },
    "/payments/requests/single" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Одностадийная операция оплаты – денежные средства с карты списываются сразу после ее проведения. Дополнительно есть возможность задать rebillFlag для предварительной авторизации рекуррентного платежа.",
        "operationId" : "Pay",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewPaymentRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/NewPaymentResponse"
                  }, {
                    "$ref" : "#/components/schemas/RebillId"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FalsePaymentResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DoublePaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments/requests/block" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Двухстадийная операция оплаты – денежные средства предварительно блокируются на карте. После успешного проведения операции денежные средства блокируются на срок до 7 дней, если в течении 7 дней операцию не подтвердить запросом Charge, то блокировка средств будет автоматически отменена. Дополнительно есть возможность задать rebillFlag для предварительной авторизации рекуррентного платежа",
        "operationId" : "Block",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewPaymentRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "allOf" : [ {
                    "$ref" : "#/components/schemas/NewPaymentResponse"
                  }, {
                    "$ref" : "#/components/schemas/RebillId"
                  } ]
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FalsePaymentResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DoublePaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments/requests/rebill" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Операция автоматического списания средств по ранее «привязанной карте».",
        "operationId" : "Rebill",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RebillRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FalsePaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments/confirmation" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Используется для операций Pay или Block с 3DS после получения результатов аутентификации от банка-эмитента для завершения блокировки или платежа.",
        "operationId" : "Сonfirm",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConfirmationRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Request is not valid"
          }
        }
      }
    },
    "/payments/refund" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Операция возврата средств по ранее проведенной операции Pay.",
        "operationId" : "Refund",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RefundRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FalsePaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments/cancellation" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Операция отмены списания по ранее проведенной операции блокировки средств на карте Block.",
        "operationId" : "Cancel",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentCancelRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FalsePaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments/charge" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Операция списания средств по ранее проведенной операции блокировки средств на карте Block.",
        "operationId" : "Charge",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PaymentChargeRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FalsePaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payments/unsubscribe" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Операция отписки от рекуррентного платежа.",
        "operationId" : "Unsubscribe",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnsubscribeRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewUnsubscribeResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid"
          }
        }
      }
    },
    "/payouts" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Операция выплаты денежных средств на карту получателя – денежные средства зачисляются на карту получателя в течении двух банковских дней.",
        "operationId" : "Payout",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewPayoutRequest"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NewPaymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Request is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/FalsePaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/balance" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Операция проверки доступного баланса для Payout.",
        "operationId" : "Balance",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BalanceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks" : {
      "post" : {
        "tags" : [ "gateway" ],
        "description" : "Выполняется после того, как оплата была успешно проведена — получена авторизация эмитента. Служит для информирования о проведенном платеже: система отправляет запрос на адрес ТСП с информацией об оплате, а сервис ТСП должен зафиксировать факт платежа.",
        "operationId" : "Webhooks",
        "parameters" : [ {
          "$ref" : "#/components/parameters/X-SITE-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-ID"
        }, {
          "$ref" : "#/components/parameters/X-REQUEST-SIGNATURE"
        } ],
        "requestBody" : {
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Webhook"
              }
            }
          }
        },
        "responses" : {
          "201" : {
            "description" : "Created"
          }
        }
      }
    }
  },
  "components" : {
    "parameters" : {
      "X-SITE-ID" : {
        "in" : "header",
        "name" : "X-SITE-ID",
        "required" : true,
        "description" : "ID Мерчанта",
        "schema" : {
          "type" : "string"
        }
      },
      "X-REQUEST-SIGNATURE" : {
        "in" : "header",
        "name" : "X-REQUEST-SIGNATURE",
        "required" : true,
        "description" : "Подпись запроса. [Описание](#section/Cifrovaya-podpis-zaprosa)",
        "schema" : {
          "type" : "string"
        }
      },
      "X-REQUEST-ID" : {
        "in" : "header",
        "name" : "X-REQUEST-ID",
        "required" : true,
        "description" : "Уникальный ID запроса у Партнера(мерчанта).",
        "schema" : {
          "type" : "string"
        }
      }
    },
    "schemas" : {
      "OrderId" : {
        "type" : "string",
        "maxLength" : 100,
        "minLength" : 1,
        "description" : "Уникальный идентификатор заказа в системе Партнера(мерчанта)."
      },
      "Country" : {
        "type" : "string",
        "maxLength" : 3,
        "minLength" : 3,
        "description" : "Код страны, указанной при оформлении карты в банке, в формате ISO."
      },
      "Amount" : {
        "type" : "integer",
        "maxLength" : 12,
        "minLength" : 1,
        "description" : "Сумма к оплате. От 1 до 12 цифр, может содержать десятичный разделитель в виде точки ‘.’."
      },
      "Description" : {
        "type" : "string",
        "maxLength" : 250,
        "minLength" : 1,
        "description" : "Описание транзакции."
      },
      "Currency" : {
        "type" : "string",
        "maxLength" : 3,
        "minLength" : 3,
        "description" : "Валюта в формате ISO (USD, EUR, RUR). Буквы (a-zA-Z)."
      },
      "RebillFlag" : {
        "type" : "integer",
        "minimum" : 0,
        "maximum" : 1,
        "description" : "Признак рекуррентного платежа.",
        "enum" : [ 0, 1 ]
      },
      "ExtraData" : {
        "type" : "object",
        "description" : "Дополнительные поля транзакции."
      },
      "Extra" : {
        "type" : "object",
        "description" : "Дополнительные параметры. JSON массив. Может содержать параметры (первые 3 обязательны):\n\n<b>success_url</b> - url для возврата с страницы success;\n<b>decline_url</b> - url для возврата с страницы error;\n<b>cancel_url</b> – url для возврата (кнопка 'Вернуться');\n<b>account_id</b> – для возврата напрямую в ЛК клиента;\n\nПример: \n{\"success_url\": \"http://server1.com/\", \"decline_url\": \"http://server2.com/\", \"cancel_url\": \"http://server3.com/\", “account_id”: “1122aass112”}\n\nВ случае режима с автоматическим редиректом покупателя: \n\n<b>success_url</b> - url для редиректа при успешной операции;\n<b>decline_url</b> - url для редиректа при неуспешной операции;\n"
      },
      "RebillId" : {
        "type" : "integer",
        "maxLength" : 20,
        "minLength" : 1,
        "description" : "Идентификатор рекуррентного платежа."
      },
      "PaymentType" : {
        "type" : "integer",
        "minimum" : 0,
        "maximum" : 1,
        "description" : "Признак учёта типа платежа родительской транзакции. Возможные значения (по умолчанию 0): 1 - использовать тип платежа (BLOCK/PAY) родительской транзакции, 0 - не использовать (всегда PAY).",
        "enum" : [ 0, 1 ]
      },
      "TransactionId" : {
        "type" : "integer",
        "maxLength" : 20,
        "minLength" : 1,
        "description" : "Идентификатор транзакции в системе."
      },
      "QiwiNumber" : {
        "type" : "integer",
        "maxLength" : 19,
        "minLength" : 12,
        "description" : "Номер QIWI"
      },
      "CardNumber" : {
        "type" : "integer",
        "maxLength" : 19,
        "minLength" : 12,
        "description" : "Номер карты. От 12 до 19 цифр без пробелов."
      },
      "ExpMonth" : {
        "type" : "integer",
        "maxLength" : 2,
        "minLength" : 2,
        "minimum" : 1,
        "maximum" : 12,
        "description" : "Месяц истечения срока действия карты. 2 цифры с лидирующим нулем."
      },
      "ExpYear" : {
        "type" : "integer",
        "maxLength" : 2,
        "minLength" : 2,
        "description" : "Год истечения срока действия карты. Последние 2 цифры года."
      },
      "CardHolder" : {
        "type" : "string",
        "maxLength" : 40,
        "minLength" : 1,
        "description" : "Владелец карты (с лицевой стороны карты). Допустимые символы [a-Z.,-]."
      },
      "CVC" : {
        "type" : "integer",
        "maxLength" : 3,
        "minLength" : 3,
        "description" : "CVC2/CVV2. 3 цифры."
      },
      "Email" : {
        "type" : "string",
        "format" : "email",
        "description" : "Email покупателя, обязательно для рекуррентных платежей. Этот Email не должен передаваться в банк, это Email для информирования Покупателя - сохраняется в транзакции."
      },
      "Phone" : {
        "type" : "integer",
        "maxLength" : 20,
        "minLength" : 10,
        "description" : "Впереди ‘+’. В МН формате +79991231212 (без пробелов)."
      },
      "Language" : {
        "type" : "string",
        "maxLength" : 5,
        "minLength" : 2,
        "description" : "Название языка (например, en, ru...)."
      },
      "Address" : {
        "type" : "string",
        "maxLength" : 200,
        "minLength" : 1,
        "description" : "Адрес держателя, указанный при оформлении карты в банке. Может присутствовать, если поддерживается верификация адреса держателя."
      },
      "Town" : {
        "type" : "string",
        "maxLength" : 200,
        "minLength" : 1,
        "description" : "Город держателя, указанный при оформлении карты в банке. Может присутствовать, если поддерживается верификация адреса держателя."
      },
      "ZIP" : {
        "type" : "string",
        "maxLength" : 20,
        "minLength" : 1,
        "description" : "Почтовый индекс держателя, указанный при оформлении карты в банке. Может присутствовать, если поддерживается верификация адреса держателя."
      },
      "IpAddress" : {
        "type" : "string",
        "format" : "ipv4",
        "description" : "IP Address"
      },
      "ProcessingAmount" : {
        "type" : "integer",
        "maxLength" : 12,
        "minLength" : 1,
        "description" : "Сумма платежа в валюте в которой операция была проведена в банке. Соответствует полученному от процессинга."
      },
      "ProcessingCurrency" : {
        "type" : "string",
        "maxLength" : 3,
        "minLength" : 3,
        "description" : "Код валюты в которой операция была проведена в банке. Соответствует полученному от процессинга."
      },
      "acsUrl" : {
        "type" : "string",
        "description" : "URL для редиректа."
      },
      "PaRes" : {
        "type" : "string",
        "description" : "Зашифрованный ответ."
      },
      "PaReq" : {
        "type" : "string",
        "description" : "Зашифрованный запрос."
      },
      "MD" : {
        "type" : "string",
        "description" : "Специальный идентификатор."
      },
      "redirectUrl" : {
        "type" : "string",
        "description" : "URL для редиректа."
      },
      "redirectParams" : {
        "type" : "string",
        "description" : "Строка параметров, с которыми нужно сделать редирект. Формат строки 'название_параметра_1=значение_параметра_1&название_параметра_2=значение_параметра_2&...'."
      },
      "redirectTransId" : {
        "type" : "string",
        "description" : "Идентификатор транзакции с системе банка."
      },
      "redirectMethod" : {
        "type" : "string",
        "description" : "HTTP метод, используемый для редиректа."
      },
      "TransactionState" : {
        "type" : "string",
        "description" : "Флаг успешности операции."
      },
      "TODO_CHANGE_FIELD_SUCCESS_LOGIC" : {
        "type" : "string",
        "description" : "Флаг операции.",
        "enum" : [ true, false, "3DS", "REDIRECT" ]
      },
      "TransactionStatus" : {
        "type" : "string",
        "enum" : [ "new", "charged", "refunded", "failedrefund", "failed", "rejectedrefund", "rejected", "pending", "frozen", "cancel", "declined", "result_unknown", "filtered" ],
        "description" : "Текущее состояние транзакции."
      },
      "newAmount" : {
        "type" : "integer",
        "maxLength" : 12,
        "minLength" : 1,
        "description" : "Остаток суммы."
      },
      "ErrorCode" : {
        "type" : "string",
        "description" : "Код ошибки."
      },
      "ErrorDescription" : {
        "type" : "string",
        "description" : "Описание ошибки."
      },
      "ErrorMessage" : {
        "type" : "string",
        "description" : "Причина отказа."
      },
      "Event" : {
        "type" : "string",
        "description" : "Payment."
      },
      "DateTime" : {
        "type" : "string",
        "format" : "date-time",
        "description" : "Payment."
      },
      "CardMasked" : {
        "type" : "string",
        "maxLength" : 19,
        "minLength" : 12,
        "description" : "Маскированный номер карты."
      },
      "IsTest" : {
        "description" : "1 - тестовый; 0 - боевой.",
        "type" : "integer",
        "enum" : [ 1, 0 ]
      },
      "Status" : {
        "type" : "string",
        "enum" : [ "CHARGED", "BLOCKED" ],
        "description" : "Статус платежа после авторизации: CHARGED — для одностадийных платежей, BLOCKED — для двухстайдиных."
      },
      "Token" : {
        "type" : "string",
        "description" : "Токен для проведения рекарринговых платежей."
      },
      "ExpirationDate" : {
        "type" : "string",
        "description" : "Дата устаревания банковской карты в формате MM/YY."
      },
      "RRN" : {
        "type" : "string",
        "description" : "Регистрационный номер транзакции в банке."
      },
      "Balance" : {
        "type" : "integer",
        "maxLength" : 12,
        "minLength" : 1,
        "description" : "Доступный размер Payout на момент запроса."
      },
      "GenericResponse" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          },
          "message" : {
            "type" : "string"
          },
          "code" : {
            "type" : "integer"
          }
        }
      },
      "Order" : {
        "type" : "object"
      },
      "Transaction" : {
        "type" : "object"
      },
      "NewWebPayRequest" : {
        "type" : "object",
        "required" : [ "OrderId", "Amount", "Currency", "Extra", "Description" ],
        "properties" : {
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "description" : {
            "$ref" : "#/components/schemas/Description"
          },
          "RebillFlag" : {
            "$ref" : "#/components/schemas/RebillFlag"
          },
          "CustomerInfo" : {
            "$ref" : "#/components/schemas/CustomerInfo"
          },
          "ExtraData" : {
            "$ref" : "#/components/schemas/ExtraData"
          },
          "Extra" : {
            "$ref" : "#/components/schemas/Extra"
          }
        }
      },
      "NewPaymentRequest" : {
        "type" : "object",
        "required" : [ "OrderId", "Amount", "Currency", "PaymentMethod", "Description" ],
        "discriminator" : {
          "propertyName" : "PaymentMethod",
          "mapping" : {
            "Card" : "#/components/schemas/CardDetails",
            "QIWI" : "#/components/schemas/QiWi"
          }
        },
        "properties" : {
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "Description" : {
            "$ref" : "#/components/schemas/Description"
          },
          "RebillFlag" : {
            "$ref" : "#/components/schemas/RebillFlag"
          },
          "CustomerInfo" : {
            "$ref" : "#/components/schemas/CustomerInfo"
          },
          "ExtraData" : {
            "$ref" : "#/components/schemas/ExtraData"
          },
          "PaymentMethod" : {
            "description" : "Payment Method",
            "type" : "string"
          }
        }
      },
      "RebillRequest" : {
        "type" : "object",
        "required" : [ "OrderId", "Amount", "Currency", "RebillId" ],
        "properties" : {
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "Description" : {
            "$ref" : "#/components/schemas/Description"
          },
          "RebillId" : {
            "$ref" : "#/components/schemas/RebillId"
          },
          "PaymentType" : {
            "$ref" : "#/components/schemas/PaymentType"
          }
        }
      },
      "ConfirmationRequest" : {
        "type" : "object",
        "required" : [ "OrderId", "PaRes", "MD", "TransactionId" ],
        "properties" : {
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          },
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          },
          "PaRes" : {
            "$ref" : "#/components/schemas/PaRes"
          },
          "MD" : {
            "$ref" : "#/components/schemas/MD"
          }
        }
      },
      "RefundRequest" : {
        "type" : "object",
        "required" : [ "Amount", "Currency", "TransactionId" ],
        "properties" : {
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "PaymentCancelRequest" : {
        "type" : "object",
        "required" : [ "Amount", "Currency", "TransactionId" ],
        "properties" : {
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "PaymentChargeRequest" : {
        "type" : "object",
        "required" : [ "Amount", "Currency", "TransactionId" ],
        "properties" : {
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "UnsubscribeRequest" : {
        "type" : "object",
        "required" : [ "RebillId" ],
        "properties" : {
          "RebillId" : {
            "$ref" : "#/components/schemas/RebillId"
          }
        }
      },
      "NewPayoutRequest" : {
        "type" : "object",
        "required" : [ "CardNumber", "CardholderName", "OrderId", "Amount", "Currency", "Description" ],
        "properties" : {
          "CardNumber" : {
            "$ref" : "#/components/schemas/CardNumber"
          },
          "CardholderName" : {
            "$ref" : "#/components/schemas/CardHolder"
          },
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "Description" : {
            "$ref" : "#/components/schemas/Description"
          },
          "CustomerInfo" : {
            "$ref" : "#/components/schemas/CustomerInfo"
          },
          "ExtraData" : {
            "$ref" : "#/components/schemas/ExtraData"
          }
        }
      },
      "NewPayformRequest" : {
        "type" : "object",
        "required" : [ "successUrl", "errorUrl", "notifyUrl", "Amount", "Currency" ],
        "properties" : {
          "successUrl" : {
            "type" : "string"
          },
          "errorUrl" : {
            "type" : "string"
          },
          "notifyUrl" : {
            "type" : "string"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "NewPayformSuccessResponse" : {
        "type" : "object",
        "required" : [ "formUrl", "token" ],
        "properties" : {
          "formUrl" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          }
        }
      },
      "NewPaymentResponse" : {
        "type" : "object",
        "required" : [ "OrderId", "TransactionId", "Amount", "Currency" ],
        "properties" : {
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          },
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          }
        }
      },
      "NewTokenResponse" : {
        "type" : "object",
        "required" : [ "TransactionState" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "true" : "#/components/schemas/TokenResponse",
            "false" : "#/components/schemas/FalseTokenResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "Состояние транзакции",
            "type" : "string"
          }
        }
      },
      "TokenResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewTokenResponse"
        }, {
          "type" : "object",
          "required" : [ "Token" ],
          "properties" : {
            "Token" : {
              "$ref" : "#/components/schemas/Token"
            }
          }
        } ]
      },
      "FalseTokenResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewTokenResponse"
        }, {
          "type" : "object",
          "required" : [ "ErrorResponse" ],
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "FalsePaymentResponse" : {
        "type" : "object",
        "required" : [ "ErrorResponse" ],
        "properties" : {
          "ErrorResponse" : {
            "$ref" : "#/components/schemas/ErrorResponse"
          }
        }
      },
      "DoublePaymentResponse" : {
        "type" : "object",
        "required" : [ "ErrorResponse" ],
        "properties" : {
          "ErrorResponse" : {
            "$ref" : "#/components/schemas/ErrorResponse"
          },
          "XXX" : {
            "type" : "object",
            "required" : [ "TransactionId", "OrderId" ],
            "properties" : {
              "OrderId" : {
                "$ref" : "#/components/schemas/OrderId"
              },
              "TransactionId" : {
                "$ref" : "#/components/schemas/TransactionId"
              }
            }
          }
        }
      },
      "NewRebillResponse" : {
        "type" : "object",
        "required" : [ "TransactionId", "TransactionState" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "success" : "#/components/schemas/RebillResponse",
            "declined" : "#/components/schemas/FalseRebillResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "Состояние транзакции",
            "type" : "string"
          },
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          }
        }
      },
      "RebillResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewRebillResponse"
        }, {
          "type" : "object",
          "required" : [ "Amount", "Currency", "ProcessingAmount", "ProcessingCurrency", "TransactionStatus" ],
          "properties" : {
            "Amount" : {
              "$ref" : "#/components/schemas/Amount"
            },
            "Currency" : {
              "$ref" : "#/components/schemas/Currency"
            },
            "ProcessingAmount" : {
              "$ref" : "#/components/schemas/ProcessingAmount"
            },
            "ProcessingCurrency" : {
              "$ref" : "#/components/schemas/ProcessingCurrency"
            },
            "TransactionStatus" : {
              "$ref" : "#/components/schemas/TransactionStatus"
            },
            "RebillId" : {
              "$ref" : "#/components/schemas/RebillId"
            }
          }
        } ]
      },
      "FalseRebillResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewRebillResponse"
        }, {
          "type" : "object",
          "required" : [ "ErrorResponse" ],
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "NewRefundResponse" : {
        "type" : "object",
        "required" : [ "TransactionId", "TransactionState" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "true" : "#/components/schemas/RefundResponse",
            "false" : "#/components/schemas/FalseRefundResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "Состояние транзакции",
            "type" : "string"
          },
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          }
        }
      },
      "RefundResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewRefundResponse"
        }, {
          "type" : "object",
          "required" : [ "Amount", "Currency", "ProcessingAmount", "ProcessingCurrency", "TransactionStatus", "newAmount" ],
          "properties" : {
            "Amount" : {
              "$ref" : "#/components/schemas/Amount"
            },
            "Currency" : {
              "$ref" : "#/components/schemas/Currency"
            },
            "ProcessingAmount" : {
              "$ref" : "#/components/schemas/ProcessingAmount"
            },
            "ProcessingCurrency" : {
              "$ref" : "#/components/schemas/ProcessingCurrency"
            },
            "TransactionStatus" : {
              "$ref" : "#/components/schemas/TransactionStatus"
            },
            "newAmount" : {
              "$ref" : "#/components/schemas/newAmount"
            }
          }
        } ]
      },
      "FalseRefundResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewRefundResponse"
        }, {
          "type" : "object",
          "required" : [ "ErrorResponse" ],
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "NewCancelResponse" : {
        "type" : "object",
        "required" : [ "TransactionId", "TransactionState" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "true" : "#/components/schemas/CancelResponse",
            "false" : "#/components/schemas/FalseCancelResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "Состояние транзакции",
            "type" : "string"
          },
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          }
        }
      },
      "CancelResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewCancelResponse"
        }, {
          "type" : "object",
          "required" : [ "Amount", "Currency", "ProcessingAmount", "ProcessingCurrency", "TransactionStatus" ],
          "properties" : {
            "Amount" : {
              "$ref" : "#/components/schemas/Amount"
            },
            "Currency" : {
              "$ref" : "#/components/schemas/Currency"
            },
            "ProcessingAmount" : {
              "$ref" : "#/components/schemas/ProcessingAmount"
            },
            "ProcessingCurrency" : {
              "$ref" : "#/components/schemas/ProcessingCurrency"
            },
            "TransactionStatus" : {
              "$ref" : "#/components/schemas/TransactionStatus"
            }
          }
        } ]
      },
      "FalseCancelResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewCancelResponse"
        }, {
          "type" : "object",
          "required" : [ "ErrorResponse" ],
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "NewChargeResponse" : {
        "type" : "object",
        "required" : [ "TransactionId", "TransactionState" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "true" : "#/components/schemas/ChargeResponse",
            "false" : "#/components/schemas/FalseChargeResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "TransactionState",
            "type" : "string"
          },
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          }
        }
      },
      "ChargeResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewChargeResponse"
        }, {
          "type" : "object",
          "required" : [ "Amount", "Currency", "ProcessingAmount", "ProcessingCurrency", "TransactionStatus", "newAmount" ],
          "properties" : {
            "Amount" : {
              "$ref" : "#/components/schemas/Amount"
            },
            "Currency" : {
              "$ref" : "#/components/schemas/Currency"
            },
            "ProcessingAmount" : {
              "$ref" : "#/components/schemas/ProcessingAmount"
            },
            "ProcessingCurrency" : {
              "$ref" : "#/components/schemas/ProcessingCurrency"
            },
            "TransactionStatus" : {
              "$ref" : "#/components/schemas/TransactionStatus"
            },
            "newAmount" : {
              "$ref" : "#/components/schemas/newAmount"
            },
            "RebillId" : {
              "$ref" : "#/components/schemas/RebillId"
            }
          }
        } ]
      },
      "FalseChargeResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewChargeResponse"
        }, {
          "type" : "object",
          "required" : [ "ErrorResponse" ],
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "NewUnsubscribeResponse" : {
        "type" : "object",
        "required" : [ "TransactionState" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "true" : "#/components/schemas/UnsubscribeResponse",
            "false" : "#/components/schemas/FalseUnsubscribeResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "TransactionState",
            "type" : "string"
          }
        }
      },
      "UnsubscribeResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewUnsubscribeResponse"
        } ]
      },
      "FalseUnsubscribeResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewUnsubscribeResponse"
        }, {
          "type" : "object",
          "required" : [ "ErrorResponse" ],
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "NewPayoutResponse" : {
        "type" : "object",
        "required" : [ "TransactionState", "OrderId" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "success" : "#/components/schemas/PayoutResponse",
            "declined" : "#/components/schemas/FalsePayoutResponse",
            "pending" : "#/components/schemas/FalsePayoutResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "success",
            "type" : "string"
          },
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          }
        }
      },
      "PayoutResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewPayoutResponse"
        }, {
          "type" : "object",
          "required" : [ "TransactionId", "Amount", "Currency", "TransactionStatus" ],
          "properties" : {
            "TransactionId" : {
              "$ref" : "#/components/schemas/TransactionId"
            },
            "Amount" : {
              "$ref" : "#/components/schemas/Amount"
            },
            "Currency" : {
              "$ref" : "#/components/schemas/Currency"
            },
            "TransactionStatus" : {
              "$ref" : "#/components/schemas/TransactionStatus"
            }
          }
        } ]
      },
      "FalsePayoutResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewPayoutResponse"
        }, {
          "type" : "object",
          "required" : [ "ErrorResponse" ],
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "BalanceResponse" : {
        "type" : "object",
        "required" : [ "TransactionState" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "success" : "#/components/schemas/NewBalanceResponse",
            "declined" : "#/components/schemas/ErrorBalanceResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "TransactionState",
            "type" : "string"
          },
          "Description" : {
            "$ref" : "#/components/schemas/Description"
          }
        }
      },
      "PayoutConfirmationResponse" : {
        "type" : "object"
      },
      "PaymentMethod" : {
        "type" : "object"
      },
      "Details" : {
        "type" : "object",
        "properties" : {
          "CardNumber" : {
            "$ref" : "#/components/schemas/CardNumber"
          },
          "ExpMonth" : {
            "$ref" : "#/components/schemas/ExpMonth"
          },
          "ExpYear" : {
            "$ref" : "#/components/schemas/ExpYear"
          },
          "CardholderName" : {
            "$ref" : "#/components/schemas/CardHolder"
          },
          "CVC" : {
            "$ref" : "#/components/schemas/CVC"
          }
        }
      },
      "CardDetails" : {
        "required" : [ "CardNumber", "ExpMonth", "ExpYear", "CVC", "CardholderName" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewPaymentRequest"
        }, {
          "type" : "object",
          "properties" : {
            "Details" : {
              "$ref" : "#/components/schemas/Details"
            }
          }
        } ]
      },
      "QiWi" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/NewPaymentRequest"
        }, {
          "type" : "object",
          "properties" : {
            "QiwiNumber" : {
              "$ref" : "#/components/schemas/QiwiNumber"
            }
          }
        } ]
      },
      "NewResponse" : {
        "type" : "object",
        "properties" : {
          "TransactionId" : {
            "type" : "integer"
          },
          "Amount" : {
            "type" : "integer"
          },
          "Currency" : {
            "type" : "string"
          },
          "ProcessingAmount" : {
            "type" : "integer"
          },
          "ProcessingCurrency" : {
            "type" : "string"
          },
          "TransactionStatus" : {
            "type" : "string"
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "required" : [ "ErrorCode", "ErrorDescription" ],
        "properties" : {
          "ErrorCode" : {
            "$ref" : "#/components/schemas/ErrorCode"
          },
          "ErrorDescription" : {
            "$ref" : "#/components/schemas/ErrorDescription"
          }
        }
      },
      "CustomerInfo" : {
        "type" : "object",
        "properties" : {
          "Email" : {
            "$ref" : "#/components/schemas/Email"
          },
          "Phone" : {
            "$ref" : "#/components/schemas/Phone"
          },
          "Language" : {
            "$ref" : "#/components/schemas/Language"
          },
          "Address" : {
            "$ref" : "#/components/schemas/Address"
          },
          "Town" : {
            "$ref" : "#/components/schemas/Town"
          },
          "ZIP" : {
            "$ref" : "#/components/schemas/ZIP"
          },
          "Country" : {
            "$ref" : "#/components/schemas/Country"
          },
          "IpAddress" : {
            "$ref" : "#/components/schemas/IpAddress"
          }
        }
      },
      "Webhook" : {
        "type" : "object",
        "required" : [ "Event", "TransactionId", "OrderId", "Amount", "Currency", "DateTime", "IsTest" ],
        "discriminator" : {
          "propertyName" : "Event",
          "mapping" : {
            "Payment" : "#/components/schemas/PaymentsWebhook",
            "Fail" : "#/components/schemas/FailWebhook",
            "Refund" : "#/components/schemas/RefundWebhook",
            "Void" : "#/components/schemas/VoidWebhook",
            "Receipt" : "#/components/schemas/ReceiptWebhook",
            "3DS" : "#/components/schemas/3DSWebhook"
          }
        },
        "properties" : {
          "Event" : {
            "description" : "Event",
            "type" : "string"
          },
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          },
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          },
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "DateTime" : {
            "$ref" : "#/components/schemas/DateTime"
          },
          "IsTest" : {
            "$ref" : "#/components/schemas/IsTest"
          },
          "Email" : {
            "$ref" : "#/components/schemas/Email"
          },
          "Phone" : {
            "$ref" : "#/components/schemas/Phone"
          },
          "Description" : {
            "$ref" : "#/components/schemas/Description"
          },
          "ExtraData" : {
            "$ref" : "#/components/schemas/ExtraData"
          }
        }
      },
      "PaymentsWebhook" : {
        "required" : [ "CardMasked", "Status" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/Webhook"
        }, {
          "type" : "object",
          "properties" : {
            "CardMasked" : {
              "$ref" : "#/components/schemas/CardMasked"
            },
            "CardHolder" : {
              "$ref" : "#/components/schemas/CardHolder"
            },
            "Status" : {
              "$ref" : "#/components/schemas/Status"
            },
            "RebillId" : {
              "$ref" : "#/components/schemas/RebillId"
            },
            "Token" : {
              "$ref" : "#/components/schemas/Token"
            },
            "ExpirationDate" : {
              "$ref" : "#/components/schemas/ExpirationDate"
            },
            "RRN" : {
              "$ref" : "#/components/schemas/RRN"
            }
          }
        } ]
      },
      "FailWebhook" : {
        "required" : [ "CardMasked", "Status", "ErrorMessage" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/Webhook"
        }, {
          "type" : "object",
          "properties" : {
            "CardMasked" : {
              "$ref" : "#/components/schemas/CardMasked"
            },
            "ErrorMessage" : {
              "$ref" : "#/components/schemas/ErrorMessage"
            },
            "CardHolder" : {
              "$ref" : "#/components/schemas/CardHolder"
            },
            "Status" : {
              "$ref" : "#/components/schemas/Status"
            },
            "ExpirationDate" : {
              "$ref" : "#/components/schemas/ExpirationDate"
            },
            "RRN" : {
              "$ref" : "#/components/schemas/RRN"
            }
          }
        } ]
      },
      "RefundWebhook" : {
        "required" : [ "CardMasked", "newAmount" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/Webhook"
        }, {
          "type" : "object",
          "properties" : {
            "CardMasked" : {
              "$ref" : "#/components/schemas/CardMasked"
            },
            "CardHolder" : {
              "$ref" : "#/components/schemas/CardHolder"
            },
            "newAmount" : {
              "$ref" : "#/components/schemas/newAmount"
            },
            "ExpirationDate" : {
              "$ref" : "#/components/schemas/ExpirationDate"
            },
            "RRN" : {
              "$ref" : "#/components/schemas/RRN"
            }
          }
        } ]
      },
      "VoidWebhook" : {
        "required" : [ "CardMasked" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/Webhook"
        }, {
          "type" : "object",
          "properties" : {
            "CardMasked" : {
              "$ref" : "#/components/schemas/CardMasked"
            },
            "CardHolder" : {
              "$ref" : "#/components/schemas/CardHolder"
            },
            "ExpirationDate" : {
              "$ref" : "#/components/schemas/ExpirationDate"
            },
            "RRN" : {
              "$ref" : "#/components/schemas/RRN"
            }
          }
        } ]
      },
      "ReceiptWebhook" : {
        "required" : [ "newAmount", "Status", "Email", "Phone" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/Webhook"
        }, {
          "type" : "object",
          "properties" : {
            "newAmount" : {
              "$ref" : "#/components/schemas/newAmount"
            },
            "Status" : {
              "$ref" : "#/components/schemas/Status"
            }
          }
        } ]
      },
      "3DSWebhook" : {
        "required" : [ "PaRes", "PaReq", "MD" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/Webhook"
        }, {
          "type" : "object",
          "properties" : {
            "PaRes" : {
              "$ref" : "#/components/schemas/PaRes"
            },
            "PaReq" : {
              "$ref" : "#/components/schemas/PaReq"
            },
            "MD" : {
              "$ref" : "#/components/schemas/MD"
            }
          }
        } ]
      },
      "NewBalanceResponse" : {
        "required" : [ "Balance", "Currency" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/BalanceResponse"
        }, {
          "type" : "object",
          "properties" : {
            "Balance" : {
              "$ref" : "#/components/schemas/Balance"
            },
            "Currency" : {
              "$ref" : "#/components/schemas/Currency"
            }
          }
        } ]
      },
      "ErrorBalanceResponse" : {
        "required" : [ "ErrorResponse" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/BalanceResponse"
        }, {
          "type" : "object",
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "TransactionIdResponse" : {
        "type" : "object",
        "required" : [ "TransactionState", "TransactionStatus", "TransactionId", "OrderId" ],
        "discriminator" : {
          "propertyName" : "TransactionState",
          "mapping" : {
            "success" : "#/components/schemas/SuccessTransactionIdResponse",
            "preauthorized" : "#/components/schemas/PreauthorizedTransactionIdResponse",
            "pending" : "#/components/schemas/PendingTransactionIdResponse",
            "declined" : "#/components/schemas/ErrorTransactionIdResponse",
            "wait_for_3ds" : "#/components/schemas/3DSTransactionIdResponse",
            "redirect" : "#/components/schemas/RedirectTransactionIdResponse"
          }
        },
        "properties" : {
          "TransactionState" : {
            "description" : "Состоянии транзакции",
            "type" : "string"
          },
          "TransactionStatus" : {
            "$ref" : "#/components/schemas/TransactionStatus"
          },
          "TransactionId" : {
            "$ref" : "#/components/schemas/TransactionId"
          },
          "OrderId" : {
            "$ref" : "#/components/schemas/OrderId"
          }
        }
      },
      "NewTransactionIdResponse" : {
        "type" : "object",
        "required" : [ "Amount", "Currency", "ProcessingAmount", "ProcessingCurrency" ],
        "properties" : {
          "Amount" : {
            "$ref" : "#/components/schemas/Amount"
          },
          "Currency" : {
            "$ref" : "#/components/schemas/Currency"
          },
          "ProcessingAmount" : {
            "$ref" : "#/components/schemas/ProcessingAmount"
          },
          "ProcessingCurrency" : {
            "$ref" : "#/components/schemas/ProcessingCurrency"
          }
        }
      },
      "SuccessTransactionIdResponse" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TransactionIdResponse"
        }, {
          "$ref" : "#/components/schemas/NewTransactionIdResponse"
        } ]
      },
      "PreauthorizedTransactionIdResponse" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TransactionIdResponse"
        }, {
          "$ref" : "#/components/schemas/NewTransactionIdResponse"
        } ]
      },
      "PendingTransactionIdResponse" : {
        "type" : "object",
        "allOf" : [ {
          "$ref" : "#/components/schemas/TransactionIdResponse"
        }, {
          "$ref" : "#/components/schemas/NewTransactionIdResponse"
        } ]
      },
      "ErrorTransactionIdResponse" : {
        "required" : [ "ErrorResponse" ],
        "allOf" : [ {
          "$ref" : "#/components/schemas/TransactionIdResponse"
        }, {
          "type" : "object",
          "properties" : {
            "ErrorResponse" : {
              "$ref" : "#/components/schemas/ErrorResponse"
            }
          }
        } ]
      },
      "3DSTransactionIdResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TransactionIdResponse"
        }, {
          "type" : "object",
          "required" : [ "acsUrl", "PaRes", "MD" ],
          "properties" : {
            "acsUrl" : {
              "$ref" : "#/components/schemas/acsUrl"
            },
            "PaRes" : {
              "$ref" : "#/components/schemas/PaRes"
            },
            "MD" : {
              "$ref" : "#/components/schemas/MD"
            }
          }
        } ]
      },
      "RedirectTransactionIdResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/TransactionIdResponse"
        }, {
          "type" : "object",
          "required" : [ "TransactionId" ],
          "properties" : {
            "TransactionId" : {
              "$ref" : "#/components/schemas/TransactionId"
            }
          }
        } ]
      },
      "OrderIdResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/TransactionIdResponse"
        }
      }
    }
  },
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/Jackburger/payment-center/v3-oas3"
  } ]
}